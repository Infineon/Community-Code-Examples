/******************************************************************************
* File Name:   main.c
*
* Description: This file contains the macros, global variables and function 
*              declarations for rsa operations.
*
* Related Document: See Readme.md
*
*******************************************************************************
* (c) 2020, Cypress Semiconductor Corporation. All rights reserved.
*******************************************************************************
* This software, including source code, documentation and related materials
* ("Software"), is owned by Cypress Semiconductor Corporation or one of its
* subsidiaries ("Cypress") and is protected by and subject to worldwide patent
* protection (United States and foreign), United States copyright laws and
* international treaty provisions. Therefore, you may use this Software only
* as provided in the license agreement accompanying the software package from
* which you obtained this Software ("EULA").
*
* If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
* non-transferable license to copy, modify, and compile the Software source
* code solely for use in connection with Cypress's integrated circuit products.
* Any reproduction, modification, translation, compilation, or representation
* of this Software except as specified above is prohibited without the express
* written permission of Cypress.
*
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
* reserves the right to make changes to the Software without notice. Cypress
* does not assume any liability arising out of the application or use of the
* Software or any product or circuit described in the Software. Cypress does
* not authorize its products for use in any products where a malfunction or
* failure of the Cypress product may reasonably be expected to result in
* significant property damage, injury or death ("High Risk Product"). By
* including Cypress's product in a High Risk Product, the manufacturer of such
* system or application assumes all risk of such use and in doing so agrees to
* indemnify Cypress against all liability.
*******************************************************************************/
#ifndef RSA_H_
#define RSA_H_

#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"

#define RSA_MODULO_LENGTH       2048u
#define RSA_MODULO_DATA_SIZE    (RSA_MODULO_LENGTH / 8)

typedef struct
{	
    cy_stc_crypto_rsa_pub_key_t keyStruct;
    uint8_t  barretCoeff    [RSA_MODULO_DATA_SIZE + 4];
    uint8_t  invModulo      [RSA_MODULO_DATA_SIZE];
    uint8_t  rBarData       [RSA_MODULO_DATA_SIZE];
} cy_stc_key_data_t;

static cy_stc_key_data_t cy_privateKey =
{
    .keyStruct =
    {
        .moduloPtr          = 0,
        .moduloLength       = RSA_MODULO_LENGTH,
        .pubExpPtr          = 0,
        .pubExpLength       = RSA_MODULO_LENGTH,
        .barretCoefPtr      = NULL,
        .inverseModuloPtr   = NULL,
        .rBarPtr            = NULL
    },
    .barretCoeff  = { 0, },
    .invModulo  = { 0, },
    .rBarData  = { 0, },
};

/* Private key used for RSA decryption*/
uint8_t  modulus[RSA_MODULO_DATA_SIZE] =
{
    0xcb, 0x6b, 0x1a, 0x90, 0xc3, 0x81, 0xd2, 0xf5, 0x88, 0xd5, 0xfd, 0x92, 0x59, 0x49, 0xdd, 0xc1, 
    0xd2, 0xda, 0x6c, 0xbd, 0xd4, 0xe3, 0x3d, 0x22, 0x25, 0x5b, 0xe6, 0xe3, 0x09, 0x33, 0x2b, 0xf4, 
    0x26, 0x08, 0x93, 0x66, 0x91, 0x02, 0x56, 0x35, 0x70, 0x21, 0x91, 0x67, 0x0f, 0x16, 0x04, 0x83, 
    0x4b, 0x19, 0xe1, 0xe5, 0x7f, 0x10, 0x95, 0xc9, 0x80, 0x8a, 0x9f, 0x22, 0xe5, 0x76, 0xf1, 0x53, 
    0xef, 0x48, 0x61, 0xbe, 0x08, 0xcb, 0x85, 0x76, 0xe8, 0xfe, 0x15, 0x25, 0xfc, 0x6b, 0x14, 0xed, 
    0xc4, 0xfb, 0x18, 0xc3, 0xba, 0x17, 0x13, 0xeb, 0xf6, 0xa6, 0x78, 0xca, 0xba, 0x8d, 0x2e, 0x39, 
    0x9a, 0xaa, 0xc0, 0x4f, 0x6d, 0xbc, 0x60, 0xf8, 0xca, 0x7b, 0x58, 0x14, 0x10, 0x4d, 0xa7, 0xcb, 
    0x53, 0x51, 0x46, 0x21, 0xab, 0xa7, 0xcd, 0xb1, 0x6e, 0x63, 0xda, 0x83, 0x86, 0xa8, 0xb2, 0x66, 
    0x44, 0x72, 0x6b, 0x51, 0x45, 0x77, 0x3c, 0xc8, 0x5d, 0x81, 0x2b, 0x5a, 0x17, 0x13, 0x27, 0x6d, 
    0x9e, 0x39, 0x03, 0xe9, 0xd2, 0xc7, 0x7e, 0x0e, 0xfa, 0xa1, 0x7e, 0x56, 0xc5, 0xac, 0x78, 0xe7, 
    0x1f, 0x58, 0x7f, 0xbd, 0xf5, 0xcc, 0xf4, 0x23, 0x8b, 0xa4, 0x38, 0xae, 0x4c, 0xda, 0x65, 0xe7, 
    0x5f, 0x43, 0x59, 0x98, 0x56, 0x25, 0x01, 0xd8, 0xe8, 0x81, 0x49, 0x26, 0xa4, 0xd1, 0xed, 0x52, 
    0xac, 0xd6, 0x63, 0x03, 0x88, 0x23, 0xda, 0x45, 0xb7, 0x9a, 0x4d, 0x04, 0xaa, 0x32, 0x13, 0xb0, 
    0x8d, 0xfb, 0x88, 0x44, 0x40, 0x21, 0xa2, 0x62, 0xd4, 0x38, 0xac, 0xb9, 0x59, 0x14, 0x42, 0xfa,
    0xda, 0x55, 0x2c, 0xaf, 0x93, 0x41, 0xdc, 0xa2, 0x20, 0x8a, 0x41, 0x34, 0x8a, 0xd5, 0x94, 0x41, 
    0x7a, 0x8c, 0xe0, 0x62, 0x79, 0x6b, 0x15, 0xe7, 0x4a, 0x6f, 0x30, 0xe1, 0xd7, 0xb3, 0x57, 0xf7
};

/* Private key exponent */
uint8_t  privateExponent[RSA_MODULO_DATA_SIZE] =
{
    0x38, 0x1c, 0x9d, 0x41, 0x5d, 0x8c, 0xcc, 0x42, 0x8a, 0xb2, 0x6c, 0xb6, 0x18, 0x07, 0x36, 0x32, 
    0xa7, 0x15, 0x35, 0x75, 0xcf, 0xe9, 0xb7, 0x0d, 0x5a, 0x3c, 0xd5, 0x9d, 0xbf, 0x05, 0xec, 0x93, 
    0xf6, 0x81, 0xdb, 0x17, 0x29, 0xdc, 0xf9, 0x26, 0xd8, 0x7d, 0x89, 0xfc, 0x61, 0xbe, 0xf3, 0x13, 
    0xbc, 0x7d, 0xb1, 0x40, 0x7b, 0x22, 0x7a, 0x0f, 0x11, 0x74, 0x2b, 0x9d, 0x96, 0xaa, 0x8e, 0xbb, 
    0x56, 0x80, 0x22, 0xe6, 0x26, 0xca, 0xed, 0x4f, 0xf5, 0xc9, 0x50, 0xd0, 0x1f, 0xa6, 0xf2, 0x28, 
    0xfc, 0x73, 0x3f, 0x4b, 0x8e, 0x63, 0x9b, 0x4d, 0x35, 0xc6, 0x89, 0xff, 0x72, 0x22, 0x4b, 0xa3, 
    0xfc, 0x34, 0x29, 0xc4, 0x3f, 0x42, 0xfd, 0x84, 0xe3, 0x65, 0xce, 0xd0, 0x0a, 0x07, 0x41, 0xc7, 
    0xe6, 0x7d, 0xbe, 0xd8, 0xbe, 0xdf, 0x14, 0xf0, 0x62, 0xc1, 0x0c, 0x9f, 0xc7, 0x5f, 0x75, 0x86, 
    0x1e, 0x65, 0x9f, 0xad, 0xeb, 0x5c, 0x8a, 0xff, 0x65, 0x8d, 0x10, 0x6a, 0xed, 0xbd, 0x4c, 0xed, 
    0x04, 0xe6, 0x39, 0xf2, 0xd4, 0x8b, 0xb1, 0xba, 0xb1, 0xb4, 0x0c, 0x10, 0xf7, 0x3e, 0xfc, 0xbe, 
    0x50, 0x62, 0xa4, 0xe9, 0x55, 0x19, 0x86, 0x89, 0x58, 0xbe, 0xfd, 0x40, 0x76, 0x37, 0x7d, 0x06, 
    0x64, 0x99, 0x29, 0x74, 0xa8, 0x47, 0x8d, 0x01, 0x8b, 0x30, 0xa2, 0x54, 0xf7, 0x91, 0xf9, 0x62, 
    0xdc, 0xc5, 0xdf, 0x11, 0x85, 0x57, 0xaa, 0x66, 0xd5, 0x5d, 0x91, 0x62, 0xab, 0xfa, 0x8e, 0x2c, 
    0xe6, 0x52, 0xc1, 0x30, 0x9d, 0xfc, 0x92, 0x29, 0x2f, 0x5c, 0x9e, 0x4a, 0x57, 0xc1, 0xbe, 0xb5, 
    0x55, 0xee, 0x0f, 0xad, 0x6c, 0xd2, 0xf8, 0x20, 0x06, 0x96, 0x95, 0x8c, 0x1b, 0x81, 0x77, 0x84, 
    0xa2, 0x85, 0xaa, 0x62, 0x6a, 0xda, 0x9c, 0xf9, 0x36, 0x65, 0xad, 0x3c, 0x65, 0xa1, 0x48, 0x61
};

CY_ALIGN(4) uint8_t encrypted_key[RSA_MODULO_DATA_SIZE];

void rsa_decrypt_key(void);

#endif /* RSA_H_ */

/* [] END OF FILE */